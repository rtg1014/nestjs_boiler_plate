name: CI/CD Pipeline  # 워크플로우의 이름을 지정합니다.

on:
  push:  # 푸시 이벤트가 발생할 때
    branches:  # 브랜치가
      - master  # master 브랜치일 때만 워크플로우를 실행합니다.

jobs:
  build-and-deploy:  # build-and-deploy 작업을 정의합니다.
    runs-on: ubuntu-latest  # Ubuntu 환경에서 실행됩니다.
    steps:  # 각 작업의 단계를 정의합니다.

      - name: Checkout repository  # 저장소를 체크아웃합니다.
        uses: actions/checkout@v2

      - name: Set up Node.js  # Node.js를 설정합니다.
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies  # 프로젝트의 의존성을 설치합니다.
        run: npm ci

      - name: Build Docker image  # Docker 이미지를 빌드합니다.
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.repository }}:${{ github.sha }} .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.repository }}:${{ github.sha }}

      - name: Deploy to ECR  # ECR로 배포합니다.
        uses: jakejarvis/ecs-deploy-docker-action@v2  # ecs-deploy-docker-action 액션을 사용합니다.
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS 액세스 키 ID를 설정합니다.
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS 시크릿 액세스 키를 설정합니다.
          region: ${{ secrets.AWS_REGION }}  # AWS 리전을 설정합니다.
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ github.repository }}:${{ github.sha }}  # Docker 이미지를 설정합니다.
          service: your-ecs-service-name  # ECS 서비스 이름을 설정합니다.
          cluster: your-ecs-cluster-name  # ECS 클러스터 이름을 설정합니다.
